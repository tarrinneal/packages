// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// Autogenerated from Pigeon, do not edit directly.
// See also: https://pub.dev/packages/pigeon
@file:Suppress("UNCHECKED_CAST", "ArrayInDataClass")

import android.util.Log
import androidx.annotation.Keep
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  return if (exception is JniTestsError) {
    listOf(exception.code, exception.message, exception.details)
  } else {
    listOf(
        exception.javaClass.simpleName,
        exception.toString(),
        "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception))
  }
}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 *
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class JniTestsError(
    val code: String,
    override val message: String? = null,
    val details: Any? = null
) : Throwable()

/** Generated class from Pigeon that represents data sent in messages. */
data class SomeTypes(
    val aString: String? = null,
    val anInt: Long? = null,
    val aDouble: Double? = null,
    val aBool: Boolean? = null
) {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): SomeTypes {
      val aString = pigeonVar_list[0] as String?
      val anInt = pigeonVar_list[1] as Long?
      val aDouble = pigeonVar_list[2] as Double?
      val aBool = pigeonVar_list[3] as Boolean?
      return SomeTypes(aString, anInt, aDouble, aBool)
    }
  }

  fun toList(): List<Any?> {
    return listOf(
        aString,
        anInt,
        aDouble,
        aBool,
    )
  }
}

private open class JniTestsPigeonCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let { SomeTypes.fromList(it) }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }

  override fun writeValue(stream: ByteArrayOutputStream, value: Any?) {
    when (value) {
      is SomeTypes -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

val JniMessageApiInstances: MutableMap<String, JniMessageApiRegistrar> = mutableMapOf()

@Keep
abstract class JniMessageApi {
  abstract fun search(request: String): String

  abstract suspend fun thinkBeforeAnswering(): String

  abstract fun sendSomeTypes(someTypes: SomeTypes): SomeTypes

  abstract suspend fun sendSomeTypesAsync(someTypes: SomeTypes): SomeTypes
}

@Keep
class JniMessageApiRegistrar : JniMessageApi() {
  var api: JniMessageApi? = null

  fun register(
      api: JniMessageApi,
      name: String = "PigeonDefaultClassName32uh4ui3lh445uh4h3l2l455g4y34u"
  ): JniMessageApiRegistrar {
    this.api = api
    JniMessageApiInstances[name] = this
    return this
  }

  @Keep
  fun getInstance(name: String): JniMessageApiRegistrar? {
    return JniMessageApiInstances[name]
  }

  override fun search(request: String): String {
    api?.let {
      try {
        return api!!.search(request)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniMessageApi has not been set")
  }

  override suspend fun thinkBeforeAnswering(): String {
    api?.let {
      try {
        return api!!.thinkBeforeAnswering()
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniMessageApi has not been set")
  }

  override fun sendSomeTypes(someTypes: SomeTypes): SomeTypes {
    api?.let {
      try {
        return api!!.sendSomeTypes(someTypes)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniMessageApi has not been set")
  }

  override suspend fun sendSomeTypesAsync(someTypes: SomeTypes): SomeTypes {
    api?.let {
      try {
        return api!!.sendSomeTypesAsync(someTypes)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniMessageApi has not been set")
  }
}
