// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as core$_;

import 'package:jni/_internal.dart' as jni$_;
import 'package:jni/jni.dart' as jni$_;

/// from: `JniMessageApi`
class JniMessageApi extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<JniMessageApi> $type;

  @jni$_.internal
  JniMessageApi.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'JniMessageApi');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $JniMessageApi$NullableType();
  static const type = $JniMessageApi$Type();
  static final _id_search = _class.instanceMethodId(
    r'search',
    r'(Ljava/lang/String;)Ljava/lang/String;',
  );

  static final _search = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract java.lang.String search(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString search(
    jni$_.JString string,
  ) {
    final _$string = string.reference;
    return _search(reference.pointer, _id_search as jni$_.JMethodIDPtr,
            _$string.pointer)
        .object<jni$_.JString>(const jni$_.JStringType());
  }

  static final _id_thinkBeforeAnswering = _class.instanceMethodId(
    r'thinkBeforeAnswering',
    r'(Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _thinkBeforeAnswering = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract java.lang.Object thinkBeforeAnswering(kotlin.coroutines.Continuation continuation)`
  /// The returned object must be released after use, by calling the [release] method.
  core$_.Future<jni$_.JString> thinkBeforeAnswering() async {
    final $p = jni$_.ReceivePort();
    final _$continuation = jni$_.ProtectedJniExtensions.newPortContinuation($p);

    _thinkBeforeAnswering(
            reference.pointer,
            _id_thinkBeforeAnswering as jni$_.JMethodIDPtr,
            _$continuation.pointer)
        .object<jni$_.JObject>(const jni$_.JObjectType())
        .release();
    _$continuation.release();
    final $o =
        jni$_.JGlobalReference(jni$_.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni$_.JStringType().jClass.reference;
    if (!jni$_.Jni.env.IsInstanceOf($o.pointer, $k.pointer)) {
      $k.release();
      throw 'Failed';
    }
    $k.release();
    return const jni$_.JStringType().fromReference($o);
  }
}

final class $JniMessageApi$NullableType extends jni$_.JObjType<JniMessageApi?> {
  @jni$_.internal
  const $JniMessageApi$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'LJniMessageApi;';

  @jni$_.internal
  @core$_.override
  JniMessageApi? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : JniMessageApi.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<JniMessageApi?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($JniMessageApi$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($JniMessageApi$NullableType) &&
        other is $JniMessageApi$NullableType;
  }
}

final class $JniMessageApi$Type extends jni$_.JObjType<JniMessageApi> {
  @jni$_.internal
  const $JniMessageApi$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'LJniMessageApi;';

  @jni$_.internal
  @core$_.override
  JniMessageApi fromReference(jni$_.JReference reference) =>
      JniMessageApi.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<JniMessageApi?> get nullableType =>
      const $JniMessageApi$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($JniMessageApi$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($JniMessageApi$Type) &&
        other is $JniMessageApi$Type;
  }
}

/// from: `JniMessageApiRegistrar`
class JniMessageApiRegistrar extends JniMessageApi {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<JniMessageApiRegistrar> $type;

  @jni$_.internal
  JniMessageApiRegistrar.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'JniMessageApiRegistrar');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $JniMessageApiRegistrar$NullableType();
  static const type = $JniMessageApiRegistrar$Type();
  static final _id_new$ = _class.constructorId(
    r'()V',
  );

  static final _new$ = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory JniMessageApiRegistrar() {
    return JniMessageApiRegistrar.fromReference(
        _new$(_class.reference.pointer, _id_new$ as jni$_.JMethodIDPtr)
            .reference);
  }

  static final _id_getApi = _class.instanceMethodId(
    r'getApi',
    r'()LJniMessageApi;',
  );

  static final _getApi = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final JniMessageApi getApi()`
  /// The returned object must be released after use, by calling the [release] method.
  JniMessageApi? getApi() {
    return _getApi(reference.pointer, _id_getApi as jni$_.JMethodIDPtr)
        .object<JniMessageApi?>(const $JniMessageApi$NullableType());
  }

  static final _id_setApi = _class.instanceMethodId(
    r'setApi',
    r'(LJniMessageApi;)V',
  );

  static final _setApi = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final void setApi(JniMessageApi jniMessageApi)`
  void setApi(
    JniMessageApi? jniMessageApi,
  ) {
    final _$jniMessageApi = jniMessageApi?.reference ?? jni$_.jNullReference;
    _setApi(reference.pointer, _id_setApi as jni$_.JMethodIDPtr,
            _$jniMessageApi.pointer)
        .check();
  }

  static final _id_register = _class.instanceMethodId(
    r'register',
    r'(LJniMessageApi;Ljava/lang/String;)LJniMessageApiRegistrar;',
  );

  static final _register = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final JniMessageApiRegistrar register(JniMessageApi jniMessageApi, java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  JniMessageApiRegistrar register(
    JniMessageApi jniMessageApi,
    jni$_.JString string,
  ) {
    final _$jniMessageApi = jniMessageApi.reference;
    final _$string = string.reference;
    return _register(reference.pointer, _id_register as jni$_.JMethodIDPtr,
            _$jniMessageApi.pointer, _$string.pointer)
        .object<JniMessageApiRegistrar>(const $JniMessageApiRegistrar$Type());
  }

  static final _id_getInstance = _class.instanceMethodId(
    r'getInstance',
    r'(Ljava/lang/String;)LJniMessageApiRegistrar;',
  );

  static final _getInstance = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final JniMessageApiRegistrar getInstance(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  JniMessageApiRegistrar? getInstance(
    jni$_.JString string,
  ) {
    final _$string = string.reference;
    return _getInstance(reference.pointer,
            _id_getInstance as jni$_.JMethodIDPtr, _$string.pointer)
        .object<JniMessageApiRegistrar?>(
            const $JniMessageApiRegistrar$NullableType());
  }

  static final _id_search = _class.instanceMethodId(
    r'search',
    r'(Ljava/lang/String;)Ljava/lang/String;',
  );

  static final _search = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public java.lang.String search(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString search(
    jni$_.JString string,
  ) {
    final _$string = string.reference;
    return _search(reference.pointer, _id_search as jni$_.JMethodIDPtr,
            _$string.pointer)
        .object<jni$_.JString>(const jni$_.JStringType());
  }

  static final _id_thinkBeforeAnswering = _class.instanceMethodId(
    r'thinkBeforeAnswering',
    r'(Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _thinkBeforeAnswering = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public java.lang.Object thinkBeforeAnswering(kotlin.coroutines.Continuation continuation)`
  /// The returned object must be released after use, by calling the [release] method.
  core$_.Future<jni$_.JString> thinkBeforeAnswering() async {
    final $p = jni$_.ReceivePort();
    final _$continuation = jni$_.ProtectedJniExtensions.newPortContinuation($p);

    _thinkBeforeAnswering(
            reference.pointer,
            _id_thinkBeforeAnswering as jni$_.JMethodIDPtr,
            _$continuation.pointer)
        .object<jni$_.JObject>(const jni$_.JObjectType())
        .release();
    _$continuation.release();
    final $o =
        jni$_.JGlobalReference(jni$_.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni$_.JStringType().jClass.reference;
    if (!jni$_.Jni.env.IsInstanceOf($o.pointer, $k.pointer)) {
      $k.release();
      throw 'Failed';
    }
    $k.release();
    return const jni$_.JStringType().fromReference($o);
  }
}

final class $JniMessageApiRegistrar$NullableType
    extends jni$_.JObjType<JniMessageApiRegistrar?> {
  @jni$_.internal
  const $JniMessageApiRegistrar$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'LJniMessageApiRegistrar;';

  @jni$_.internal
  @core$_.override
  JniMessageApiRegistrar? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : JniMessageApiRegistrar.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const $JniMessageApi$Type();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<JniMessageApiRegistrar?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 2;

  @core$_.override
  int get hashCode => ($JniMessageApiRegistrar$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($JniMessageApiRegistrar$NullableType) &&
        other is $JniMessageApiRegistrar$NullableType;
  }
}

final class $JniMessageApiRegistrar$Type
    extends jni$_.JObjType<JniMessageApiRegistrar> {
  @jni$_.internal
  const $JniMessageApiRegistrar$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'LJniMessageApiRegistrar;';

  @jni$_.internal
  @core$_.override
  JniMessageApiRegistrar fromReference(jni$_.JReference reference) =>
      JniMessageApiRegistrar.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const $JniMessageApi$Type();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<JniMessageApiRegistrar?> get nullableType =>
      const $JniMessageApiRegistrar$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 2;

  @core$_.override
  int get hashCode => ($JniMessageApiRegistrar$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($JniMessageApiRegistrar$Type) &&
        other is $JniMessageApiRegistrar$Type;
  }
}
