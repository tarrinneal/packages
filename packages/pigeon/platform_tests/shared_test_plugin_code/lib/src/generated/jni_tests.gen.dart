// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// Autogenerated from Pigeon, do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';
import 'package:jni/jni.dart';
import './jni_tests.gen.jni.dart' as bridge;

class SomeTypes {
  SomeTypes({
    this.aString,
    this.anInt,
    this.aDouble,
    this.aBool,
  });

  String? aString;

  int? anInt;

  double? aDouble;

  bool? aBool;

  bridge.SomeTypes toJni() {}
  Object encode() {
    return <Object?>[
      aString,
      anInt,
      aDouble,
      aBool,
    ];
  }

  static SomeTypes fromJni(bridge.SomeTypes jniClass) {}
  static SomeTypes decode(Object result) {
    result as List<Object?>;
    return SomeTypes(
      aString: result[0] as String?,
      anInt: result[1] as int?,
      aDouble: result[2] as double?,
      aBool: result[3] as bool?,
    );
  }
}

const String defaultInstanceName =
    'PigeonDefaultClassName32uh4ui3lh445uh4h3l2l455g4y34u';

class JniMessageApi {
  JniMessageApi._withRegistrar(bridge.JniMessageApiRegistrar api) : _api = api;

  /// Returns instance of JniMessageApi with specified [channelName] if one has been registered.
  static JniMessageApi? getInstance(
      {String channelName = defaultInstanceName}) {
    final bridge.JniMessageApiRegistrar? link = bridge.JniMessageApiRegistrar()
        .getInstance(JString.fromString(channelName));
    if (link == null) {
      String nameString = 'named $channelName';
      if (channelName == defaultInstanceName) {
        nameString = 'with no name';
      }
      final String error = 'No instance $nameString has been registered.';
      throw ArgumentError(error);
    }
    final JniMessageApi res = JniMessageApi._withRegistrar(link);
    return res;
  }

  late final bridge.JniMessageApiRegistrar _api;

  String search(String request) {
    final JString res = _api.search(JString.fromString(request));
    final String dartTypeRes = res.toString();
    res.release();
    return dartTypeRes;
  }

  Future<String> thinkBeforeAnswering() async {
    final JString res = await _api.thinkBeforeAnswering();
    final String dartTypeRes = res.toString();
    res.release();
    return dartTypeRes;
  }

  SomeTypes sendSomeTypes(SomeTypes someTypes) {
    final bridge.SomeTypes res = _api.sendSomeTypes(someTypes.toJni());
    final SomeTypes dartTypeRes = SomeTypes.fromJni(res);
    res.release();
    return dartTypeRes;
  }

  Future<SomeTypes> sendSomeTypesAsync(SomeTypes someTypes) async {
    final bridge.SomeTypes res =
        await _api.sendSomeTypesAsync(someTypes.toJni());
    final SomeTypes dartTypeRes = SomeTypes.fromJni(res);
    res.release();
    return dartTypeRes;
  }
}
